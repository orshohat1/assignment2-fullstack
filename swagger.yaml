openapi: 3.0.0
info:
  title: Blog API
  description: API for managing posts, users, and comments.
  version: "1.0.0"
servers:
  - url: http://localhost:3000
    description: Local server

tags:
  - name: "users"
    description: "Endpoints related to users"
  - name: "comments"
    description: "Endpoints related to comments"
  - name: "posts"
    description: "Endpoints related to posts"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: The user email
        password:
          type: string
          description: The user password
      example:
        email: 'johndoe@example.com'
        password: 'Aa123456'
    LogoutRefresh:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: The user refresh token
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

paths:
  /users/signup:
    post:
      tags:
        - users
      summary: Sign up a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The user's first name
                lastName:
                  type: string
                  description: The user's last name
                email:
                  type: string
                  description: The user's email
                  format: email
                userName:
                  type: string
                  description: The user's username
                password:
                  type: string
                  description: The user's password
                  format: password
              required: [firstName, lastName, email, userName, password]
              example:
                firstName: "John"
                lastName: "Doe"
                email: "johndoe@example.com"
                userName: "johnD"
                password: "Aa123456"
      responses:
        "201":
          description: User signed up successfully
        "400":
          description: Bad Request
        "500":
          description: Server Error
  /users/login:
    post:
      tags:
        - users
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Invalid Credentials
        "404":
          description: User not found
        "500":
          description: Server Error
  /users/logout:
    post:
      tags:
        - users
      summary: Log out a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRefresh'
      description: Logs out the authenticated user by invalidating their session or token.
      responses:
        "200":
          description: User logged out successfully
        "401":
          description: Unauthorized. The user is not authenticated or token is invalid.
        "403":
          description: Token is required for logout
        "500":
          description: Server Error
  /users/refresh:
    post:
      tags:
        - users
      summary: Refresh the authentication token
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRefresh'
      responses:
        "200":
          description: New tokens generated
        "400":
          description: Invalid refresh token
        "500":
          description: Internal server error
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to retrieve.
          schema:
            type: string
      responses:
        "200":
          description: User retrieved successfully
        "400":
          description: Bad request
        "404":
          description: User not found
        "500":
          description: Server Error
    delete:
      tags:
        - users
      summary: Delete a user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to delete.
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully.
        "401":
          description: Unauthorized. The user is not authenticated.
        "404":
          description: User not found.
        "500":
          description: Server Error
    put:
      tags:
        - users
      summary: Edit a user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user to update.
          schema:
            type: string
      requestBody:
        description: The user details to update.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                userName:
                  type: string
              example:
                firstName: "John"
                lastName: "Doe"
                email: "johndoe@example.com"
                userName: "john_doe_updated"
      responses:
        "200":
          description: User updated successfully.
        "401":
          description: Unauthorized. The user is not authenticated.
        "404":
          description: User not found.
  /posts:
    get:
      tags:
        - posts
      summary: Get all posts or posts by author
      parameters:
        - in: query
          name: sender
          required: false
          schema:
            type: string
          description: The author of the posts to filter by (optional)
      responses:
        "200":
          description: List of posts
        "404":
          description: No posts found
        "500":
          description: Server Error
    post:
      tags:
        - posts
      summary: Add a new post
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: authorId
          required: true
          schema:
            type: string
          description: The ID of the author creating the post
      requestBody:
        description: Post object to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
              example:
                title: "New Post"
                content: "This is the content of the new post"
      responses:
        "200":
          description: Post created successfully
        "500":
          description: Server Error

  /posts/{id}:
    get:
      tags:
        - posts
      summary: Get a post by ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the post
          schema:
            type: string
      responses:
        "200":
          description: Got post details
        "500":
          description: Server Error
    put:
      tags:
        - posts
      summary: Update a post by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      requestBody:
        description: Updated post object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
              example:
                title: "Updated Title"
                content: "Updated content"
      responses:
        "200":
          description: Post updated successfully
        "400":
          description: Bad request
        "500":
          description: Server Error
    delete:
      tags:
        - posts
      summary: Delete a post by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the post to delete
          schema:
            type: string
      responses:
        "200":
          description: Post deleted successfully
        "404":
          description: Post not found
        "500":
          description: Server Error
  
  /comments/post/{postId}/{author}:
    post:
      tags:
        - comments
      summary: Create a new comment on a post
      description: Creates a new comment on the specified post. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to add the comment to
        - in: path
          name: author
          required: true
          schema:
            type: string
          description: The ID of post's author
      requestBody:
        description: The comment data to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: The content of the comment
              required:
                - content
              example:
                content: "This is a new comment on the post"
      responses:
        "201":
          description: Comment created successfully
        "400":
          description: Bad request
        "500":
          description: Server Error

  /comments/{id}:
    get:
      tags:
        - comments
      summary: Get a comment by ID
      description: Retrieves a specific comment by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the comment to retrieve
      responses:
        "200":
          description: The comment details
        "400":
          description: Bad request
        "404":
          description: Comment not found.
        "500":
          description: Server Error

    put:
      tags:
        - comments
      summary: Edit a comment
      description: Updates an existing comment. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the comment to edit
      requestBody:
        description: The updated comment data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: The updated content of the comment
              required:
                - content
              example:
                content: "This is the updated content of the comment"
      responses:
        "200":
          description: Comment updated successfully
        "400":
          description: Bad request
        "404":
          description: Comment not found

    delete:
      tags:
        - comments
      summary: Delete a comment
      description: Deletes a comment by its ID. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the comment to delete
      responses:
        "200":
          description: Comment deleted successfully
        "404":
          description: Comment not found
        "500":
          description: Server Error

  /comments/postComments/{postId}:
    get:
      tags:
        - comments
      summary: Get all comments for a specific post
      description: Retrieves all comments associated with a particular post identified by `postId`.
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to retrieve comments for
      responses:
        "200":
          description: List of comments for the specified post
        "404":
          description: Post not found, no comments available for this post
